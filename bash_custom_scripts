#
# Generate a random password
#
randompwd() {
  openssl rand -base64 2048 | tr '\n' '+' | sed -e 's/[\n\/=+]//g' | cut -c1-${1:-50} | head -n1
}
# exclude results from bash history (for obvious reasons...)
export HISTIGNORE="randompwd $HISTIGNORE"

#
# Open Chrome Canary with CORS disables
#
nocors() {
  if [ ! -d "$HOME/.Chrome" ]; then mkdir "$HOME/.Chrome"; fi
  open -a Google\ Chrome --args --disable-web-security --user-data-dir="$HOME/.Chrome"
}

#
# Open the iCloud Drive folder
#
ICLOUD="$HOME/Library/Mobile Documents/com~apple~CloudDocs"
icloud() {
  cd "$ICLOUD"
}

#
# Budo scripts
#
budo-create() {
  local project_name="$1"
  local babel_version="7.0.0"
  if [ -z "$project_name" ]; then
    echo "Usage: new-budo PROJECT_NAME"
    return
  fi

  # Create Project
  mkdir "$project_name" && cd $_ || return
  cat >package.json <<-EOF
{
  "name": "$package_name",
  "version": "0.0.1",
  "private": true,
  "author": "AurÃ©lien Noce <aurelien@noce.fr>",
  "license": "mit",
  "main": "index.js",
  "scripts": {
    "start": "budo index.js --live --open -- -t babelify"
  },
  "devDependencies": {
    "@babel/core": "$babel_version",
    "@babel/plugin-proposal-class-properties": "$babel_version",
    "@babel/plugin-proposal-object-rest-spread": "$babel_version",
    "@babel/preset-env": "$babel_version",
    "babelify": "^10.0.0",
    "browserify": "^16.2.3",
    "budo": "^11.5.0"
  }
}
EOF
  cat >.babelrc <<-EOF
{
  "presets": [ 
    ["@babel/preset-env", {
      "targets": {
        "browsers": ["last 2 versions", "safari >= 7"]
      }
    }]
  ],
  "ignore" : ["/node_modules/*"],
  "plugins": [
    "@babel/plugin-proposal-object-rest-spread",
    "@babel/plugin-proposal-class-properties"
  ]
}
EOF
  cat >.gitignore <<-EOF
node_modules
.DS_Store
*.swp
EOF
  cat >index.html <<-EOF
<!DOCTYPE html>
<html lang="fr">
<head>
  <title>Live Edit Page</title>
  <meta charset="utf-8">
</head>
<body>
  <script src="index.js"></script>
</body>
</html>
EOF
  cat >index.js <<-EOF
// CODE GOES HERE ðŸ˜‡
EOF
  git init .
  git ci -m "Initial commit" --allow-empty
  yarn 
  git add .
  git ci -m "Add starter code"

  #code . & yarn start
  yarn start
}

budo-create-react() {
  local project_name="$1"
  if [ -z "$project_name" ]; then
    echo "Usage: budo-create-react PROJECT_NAME [--redux]"
    return
  fi

  # Lookup flags
  local useredux;
  for i in "$@"; do
    case $i in
      --redux)
        useredux=YES
        ;;
    esac
  done

  # Create Project
  mkdir "$project_name" && cd $_ || return
  cat >package.json <<-EOF
{
  "name": "$package_name",
  "version": "0.0.1",
  "private": true,
  "author": "AurÃ©lien Noce <aurelien@noce.fr>",
  "license": "mit",
  "main": "index.js",
  "scripts": {
    "start": "NODE_ENV='development' budo ./index.js --live='*.{html,css}' --open -- -t babelify -p livereactload"
  }
}
EOF
  cat >.babelrc <<-EOF
{
  "presets": [ 
    ["env", {
      "targets": {
        "browsers": ["last 2 versions", "safari >= 7"]
      }
    }],
    "react" 
  ],
  "ignore" : ["/node_modules/*"],
  "env": {
    "development": {
      "plugins": [
        "transform-class-properties",
        "transform-object-rest-spread",
        ["react-transform", {
          "transforms": [{
            "transform": "livereactload/babel-transform",
            "imports": ["react"]
          }]
        }]
      ]
    }
  }
}
EOF

  cat >index.html <<-EOF
<!DOCTYPE html>
<html lang="fr">
<head>
  <title>React Project</title>
  <meta charset="utf-8">
  <link rel="stylesheet" href="index.css">
</head>
<body>
  <!-- Some ROOT element -->
  <div id="root" class="container"></div>

  <script src="index.js"></script>
</body>
</html>
EOF
  cat >index.css <<-EOF
@import url("https://fonts.googleapis.com/css?family=Open+Sans:600,700");

:root {
    font: 600 16px "Open Sans", sans-serif;
    font-size: 1.2rem;
}
EOF
  cat >.gitignore <<-EOF
.DS_Store
node_modules
*.swp
EOF
  if [ "$useredux" = YES ]; then
    cat >index.js <<-EOF
// CODE GOES HERE ðŸ˜‡

import React, {PureComponent} from "react";
import {render as renderDOM} from "react-dom";
import {combineReducers, createStore, bindActionCreators} from "redux";
import {Provider, connect} from "react-redux";

class HelloWorld extends PureComponent {
  onChange = (event) => {
    const {updateWho} = this.props;
    updateWho(event.target.value);
  }

  render() {
    const {who} = this.props;
    return (
      <div>
        <h3>Hello {who}</h3>
        <input onChange={this.onChange} value={who}/>
      </div>
    );
  }
}

const HelloWorldContainer = connect(
  // mapStateToProps
  state => ({ who: state.who }),
  // mapDispachToProps
  dispatch => bindActionCreators({ updateWho }, dispatch),
)(HelloWorld);

/******************************************************************************
 * REDUX Actions, Reducers and Store
 ******************************************************************************/

const who = (state="World", action) => {
  switch(action.type) {
  case "UPDATE_WHO":
    return action.payload.text;
  }
  return state;
};

// Action creator pour UPDATE_WHO
function updateWho(text) { 
  return {
    type: "UPDATE_WHO",
    payload: { text },
  };
}

// Liste de tous les reducers "racine"
const REDUCERS = { who }

function configureStore(global, initialState={}) {
  if (!global.store) {
    const rootReducer = combineReducers(REDUCERS); 
    global.store = createStore(
      rootReducer, 
      initialState,
      window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()
    );
  } else if (module.hot) {
      module.hot.accept(() => {
        // le module ./reducers a pu changer => on recharge (mais on garde le store !)
        const nextRootReducer = combineReducers(REDUCERS);
        global.store.replaceReducer(nextRootReducer);
      });
  }
  return window.store;
}

// Chargement initial
const store = configureStore(window);
const rootNode = document.querySelector("#root");
renderDOM(
  <Provider store={store}>
    <HelloWorldContainer />
  </Provider>,
  rootNode);
EOF
  else
    cat >index.js <<-EOF
// CODE GOES HERE ðŸ˜‡

import React from "react";
import {render as renderDOM} from "react-dom";

class HelloWorld extends React.Component {
  state = {
    who: "World",
  };

  onChange = (event) => {
    const who = event.target.value;
    this.setState({ who });
  }

  render() {
    return (
      <div>
        <h3>Hello {this.state.who}</h3>
        <input onChange={this.onChange} value={this.state.who}/>
      </div>
    );
  }
}

const rootNode = document.querySelector("#root");
renderDOM(<HelloWorld />, rootNode);
EOF
  fi
  git init .
  git commit -m "Initial commit" --allow-empty
  yarn add --dev \
       budo babelify browserify \
       babel-core babel-preset-env babel-preset-react \
       babel-plugin-transform-class-properties babel-plugin-transform-object-rest-spread \
       livereactload react-proxy babel-plugin-react-transform || return
  if [ "$useredux" = YES ]; then
    yarn add react react-dom redux react-redux
  else
    yarn add react react-dom
  fi
  git add .
  git ci -m "Add starter code"

  #code . & 
  yarn start
}

create-dart() {
  local project_name="$1"
  if [ -z "$project_name" ]; then
    echo "Usage: create-dart PROJECT_NAME"
    return
  fi

  # Create Project
  mkdir "$project_name" && cd $_ || return
  cat >pubspec.yaml <<-EOF
name: $project_name
description: A simple Dart Web project
transformers:
- \$dart2js: {}

EOF
  # Load dependencier
  pub get

  # Add simple template
  mkdir web
  cat >web/index.html <<-EOF
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <meta http-equiv="X-UA-Compatible" content="ie=edge">
    <title>Dart Project</title>
</head>
<body>
    <div id="main"></div>
    <script src="./script.dart.js"></script>
</body>
</html>
EOF
  cat >web/script.dart<<-EOF
import "dart:html";

void main() {
  print("Hello from Dart");
}
EOF

  git init .
  git commit -m "Initial commit" --allow-empty
  git add .
  git commit -m "Add starter code"

  # Start the dev server
  pub serve
}

# Git functions
gitzip() {
  if [ -z "$1" ];then
    ref=$(git rev-parse --short HEAD)
  else
    ref="$1"
  fi
  dirname=$(basename `pwd`)
  git archive --format zip "$ref" > "${dirname}-${ref}.zip"
}

gitpatch() {
  if [ -z "$1" ];then
    echo "Usage: gitpatch ref1 [ref2]"
    return
  fi
  fromref="$1"
  if [ -z "$2" ];then
    toref=$(git rev-parse --short HEAD)
  else
    toref="$2"
  fi
  dirname=$(basename `pwd`)
  git format-patch "${fromref}..${toref}" --stdout > "${dirname}-${fromref}..${toref}.patch"
  zip "${dirname}-${fromref}..${toref}.patch.zip" "${dirname}-${fromref}..${toref}.patch"
}

save_quiver() {
  (cd "$HOME/WIP/quiver_library"; git checkout master; git pull origin master)
  quiver_to_markdown "$ICLOUD/Quiver/Quiver.qvlibrary" "$HOME/WIP/quiver_library"
  (cd "$HOME/WIP/quiver_library"; git add --all && git commit && git push origin)
  # if Dropbox is installed and Quiver is sync, we also copy the contents
  local DROPBOX_HOME="$HOME/Dropbox (Personnelle)"
  if [ -d "$DROPBOX_HOME" ] && [ -d "$DROPBOX_HOME/Quiver.qvlibrary" ]; then
    cp -r "$ICLOUD/Quiver/Quiver.qvlibrary" "$DROPBOX_HOME"
  fi
}

#
# Helpers to chose term color
#

term256_textcolor() {
  echo
  echo "Available foreground color codes for 256-color terminals:"
  echo
  for color in {0..255} ; do # Colors
      # Display the color
      printf "\e[38;5;%sm  %3s  \e[0m" $color $color
      # Display 10 colors per lines
      if [ $((($color + 1) % 10)) == 0 ] ; then
          echo # New line
      fi
  done
  echo; echo
  echo -e "To use these colors in a shell script:"
  echo
  echo -e "     echo -e \033[34m\"\\\033[38;5;\033[91mCOLOR_CODE\033[34mm\"\033[0m"
  echo "or"
  echo -e "     printf \033[34m\"\\e[38;5;\033[91mCOLOR_CODE\033[34mm\"\033[0m"
  echo
}

term256_bgcolor() {
  echo
  echo "Available background color codes for 256-color terminals:"
  echo
  for color in {0..255} ; do # Colors
      # Display the color
      printf "\e[48;5;%sm  %3s  \e[0m" $color $color
      # Display 10 colors per lines
      if [ $((($color + 1) % 10)) == 0 ] ; then
          echo # New line
      fi
  done
  echo; echo
  echo -e "To use these colors in a shell script:"
  echo
  echo -e "     echo -e \033[34m\"\\\033[48;5;\033[91mCOLOR_CODE\033[34mm\"\033[0m"
  echo "or"
  echo -e "     printf \033[34m\"\\e[48;5;\033[91mCOLOR_CODE\033[34mm\"\033[0m"
  echo
}

sri() {
  local file="$1"
  if [ -z "$file" ]; then
    echo "Usage: sri FILE"
    return
  fi
  cat "$file" | openssl dgst -sha384 -binary | openssl enc -base64 -A
}
