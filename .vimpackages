" Vimproc
"NeoBundleLazy 'Shougo/vimproc', { 'build': {
"       \ 'windows': 'make -f make_mingw32.mak',
"       \ 'cygwin': 'make -f make_cygwin.mak',
"       \ 'mac': 'make -f make_mac.mak',
"       \ 'unix': 'make -f make_unix.mak',
"       \ } }

NeoBundleLazy 'Valloric/YouCompleteMe', { 'build': {
       \ 'mac': './install.sh --clang-completer',
       \ 'unix': './install.sh --clang-completer' }}

" fix airline bug
set laststatus=2
" better status line
NeoBundle 'bling/vim-airline'

" smart syntax checker
NeoBundleLazy 'scrooloose/syntastic', {
      \ 'autoload' : {
      \   'filetypes' : [ 'ruby', 'eruby', 'javascript', 'cucumber', 'coffee' ],
      \ }}

" emmet
NeoBundleLazy 'mattn/emmet-vim', {
      \ 'autoload' : {
      \   'insert' : 1,
      \   'filetypes' : [ 'html', 'css', 'sass', 'eruby'],
      \ }}

NeoBundleLazy 'scrooloose/nerdtree', {
      \ 'autoload' : {
      \  'commands' : [ 'NERDTreeToggle' ],
      \ }}

" Git fugitive
NeoBundle 'tpope/vim-fugitive'

" Copty as RTF
NeoBundle 'zerowidth/vim-copy-as-rtf'

" Editor config
NeoBundle 'editorconfig/editorconfig-vim'

" CtrlP
NeoBundle 'kien/ctrlp.vim'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM COLORS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""

NeoBundleLazy 'pangloss/vim-javascript', {'autoload': { 'filetypes': 'javascript'}}
NeoBundleLazy 'othree/html5.vim', {'autoload': {'filetypes': 'html'}}
NeoBundleLazy 'lunaru/vim-less', {'autoload': {'filetypes': 'less'}}
NeoBundleLazy 'tpope/vim-cucumber', {'autoload': {'filetypes': 'feature'}}
NeoBundleLazy 'cakebaker/scss-syntax.vim', {'autoload': {'filetypes': 'scss'}}
NeoBundleLazy 'kchmck/vim-coffee-script', {'autoload': {'filetypes': 'coffee'}}
NeoBundleLazy 'plasticboy/vim-markdown', {'autoload': {'filetypes': 'mkd'}}
NeoBundleLazy 'elzr/vim-json', {'autoload': {'filetypes': 'json'}}

" Auto load filetype

augroup syntaxEx

  autocmd! BufRead,BufNewFile *.sass setlocal filetype=sass
  autocmd! BufRead,BufNewFile *.scss setlocal filetype=scss
  autocmd! BufRead,BufNewFile *.coffee setlocal filetype=coffee
  autocmd! BufRead,BufNewFile *.less setlocal filetype=less
  autocmd! BufRead,BufNewFile *.json setlocal filetype=json
  autocmd! BufRead,BufNewFile *.feature setlocal filetype=cucumber
  autocmd! BufRead,BufNewFile Gemfile,Procfile,Podfile,VagrantFile,Cheffile setlocal filetype=ruby
  autocmd! BufRead,BufNewFile .pryrc setlocal filetype=ruby

  " replace markdown by github markdown everywhere
  autocmd! BufNewFile,BufRead *.md,*.markdown setlocal filetype=mkd

augroup END

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" CUSTOM KEY MAPS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" c-SPACE => emmet
let g:user_emmet_leader_key = ','
let g:user_emmet_expandabbr_key = '<C-@>'

" fugitive
" <leader>-SPACE to enter any git command
nnoremap g<Space> :Git<Space>
" g-X for git command (X = first letter of the command)
nnoremap gs :Gstatus<CR>
nnoremap ga :Gwrite<CR>
nnoremap gc :Gcommit<CR>
nnoremap gb :Gblame<CR>
nnoremap gd :Gdiff<CR>
nnoremap gD <c-w>h<c-w>c
nnoremap gl :Glog<CR>
vnoremap <leader>p :diffput<CR>:diffupdate<CR>
vnoremap <leader>o :diffget<CR>:diffupdate<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OPTIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic
" use google's gslint
let g:syntastic_javascript_checkers = ['gjslint', 'jslint']

" Gist
let g:gist_get_multiplefile = 1
let g:gist_post_private = 1

" fix ugly airline in Terminal.app
let g:airline_left_sep=''
let g:airline_right_sep=''

" neocomplete
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
" <TAB>: completion.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
endfunction
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" NERD Tree
noremap <c-N> :NERDTreeToggle<cr>
let NERDTreeHijackNetrw=0

" Crunch
noremap <leader-c> :CrunchLine<CR>

" CtrlP
let g:ctrlp_map = '<leader>i'
let g:ctrlp_cmd = 'CtrlP'
set wildignore+=*/tmp/*,*.so,*.swp,*.zip,*.exe

let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn)$'
let g:ctrlp_custom_ignore = {
  \ 'dir':  '\v[\/]\.(git|hg|svn)$',
  \ 'file': '\v\.(exe|so|dll|swp)$'}
