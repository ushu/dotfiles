#
# Generate a random password
#
randompwd() {
  openssl rand -base64 2048 | tr '\n' '+' | sed -e 's/[\n\/=+]//g' | cut -c1-${1:-50} | head -n1
}

#
# Open Chrome Canary with CORS disables
#
nocors() {
  if [ ! -d "$HOME/.Chrome" ]; then mkdir "$HOME/.Chrome"; fi
  open -a Google\ Chrome --args --disable-web-security --user-data-dir="$HOME/.Chrome"
}

#
# Open the iCloud Drive folder
#
ICLOUD="$HOME/Library/Mobile Documents/com~apple~CloudDocs"
icloud() {
  cd "$ICLOUD"
}

#
# Budo scripts
#
budo-create() {
  local project_name="$1"
  if [ -z "$project_name" ]; then
    echo "Usage: new-budo PROJECT_NAME"
    return
  fi

  # Create Project
  mkdir "$project_name" && cd $_ || return
  cat >package.json <<-EOF
{
  "name": "$package_name",
  "version": "0.0.1",
  "main": "index.js",
  "author": "Aur√©lien Noce <aurelien.noce@imagine-app.fr> (http://imagine-app.fr/)",
  "license": "@2017 Aur√©lien Noce & imagine-app",
  "scripts": {
    "start": "budo index.js --live --open -- -t babelify"
  }
}
EOF
  cat >.babelrc <<-EOF
{
  "presets": [ "es2017", "stage-0" ],
  "ignore" : ["/node_modules/*"]
}
EOF
  cat >.gitignore <<-EOF
node_modules
.DS_Store
*.swp
EOF
  cat >index.html <<-EOF
<!DOCTYPE html>
<html lang="fr">
<head>
  <title>Live Edit Page</title>
  <meta charset="utf-8">
</head>
<body>
  <script src="index.js"></script>
</body>
</html>
EOF
  cat >index.js <<-EOF
// CODE GOES HERE üòá
EOF
  git init .
  git ci -m "Initial commit" --allow-empty
  yarn add --dev budo babelify browserify babel-core babel-preset-es2017 babel-preset-stage-0 || return
  git add .
  git ci -m "Starter code"

  #yarn start
  #osascript -e 'tell application "Terminal" to activate' \
  #  -e 'tell application "System Events" to tell process "Terminal" to keystroke "t" using command down' \
  #  -e "tell application \"Terminal\" to do script \"yarn start\" in selected tab of the front window" 
  ttab -q -t "Budo server" "cd '$PWD' && yarn start"
  osascript -e 'tell application "Terminal" to activate' \
    -e 'tell application "System Events" to tell process "Terminal" to keystroke "[" using command down' 

  #webstorm . index.js
  #e index.js &
  "$EDITOR" index.js
}

budo-create-react() {
  local project_name="$1"
  if [ -z "$project_name" ]; then
    echo "Usage: new-budo PROJECT_NAME"
    return
  fi

  # Create Project
  mkdir "$project_name" && cd $_ || return
  cat >package.json <<-EOF
{
  "name": "$package_name",
  "version": "0.0.1",
  "main": "index.js",
  "author": "Aur√©lien Noce <aurelien.noce@imagine-app.fr> (http://imagine-app.fr/)",
  "license": "@2017 Aur√©lien Noce & imagine-app",
  "scripts": {
    "start": "NODE_ENV='development' budo ./index.js --live='*.{html,css}' --open -- -t babelify -p livereactload"
  }
}
EOF
  cat >.babelrc <<-EOF
{
  "presets": [ "es2017", "react", "stage-0" ],
  "ignore" : ["/node_modules/*"],
    "env": {
    "development": {
      "plugins": [
        ["react-transform", {
          "transforms": [{
            "transform": "livereactload/babel-transform",
            "imports": ["react"]
          }]
        }]
      ]
    }
  }
}
EOF

  cat >index.html <<-EOF
<!DOCTYPE html>
<html lang="fr">
<head>
  <title>React Project</title>
  <meta charset="utf-8">

  <!-- Custom Styles -->
  <link rel="stylesheet" href="style.css">

  <!-- Additional Fonts -->
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:600,700" rel="stylesheet">
</head>
<body>
  <!-- Some ROOT element -->
  <div id="root" class="container"></div>

  <script src="index.js"></script>
</body>
</html>
EOF
  cat >style.css <<-EOF
:root {
    font: 600 16px "Open Sans", sans-serif;
}

.HelloWorld-label {
  font-size: 1.2rem;
}
EOF
  cat >.gitignore <<-EOF
.DS_Store
node_modules
*.swp
EOF
  cat >index.js <<-EOF
// CODE GOES HERE üòá

import React, {Component} from "react";
import {render as renderDOM} from "react-dom";

class HelloWorld extends Component {
  state = {
    who: "World",
  };

  updateWho(event) {
    const who = event.target.value;
    this.setState({ who });
    event.preventDefault();
  }

  render() {
    return (
      <div>
        <h3 className="HelloWorld-label">Hello {this.state.who}</h3>
        <input className="HelloWorld-input" type="text" onChange={ev => this.updateWho(ev)} value={this.state.who}/>
      </div>
    );
  }
}

/******************************************************************************
 *if using Redux, uncomment the following snippet to handle LiveReload
 *  (if not you can TRASH it !)
 ******************************************************************************

function configureStore(initialState) {
  const nextRootReducer = combineReducers({ REDUCERS }); // √† compl√©ter avec le root reducer

  const store = createStore(rootReducer, initialState);
  if (module.hot) {
      module.hot.accept(() => {
        const nextRootReducer = combineReducers({ REDUCERS }); // √† compl√©ter avec le root reducer
        store.replaceReducer(nextRootReducer);
      });
  }
  return store;
}
const store = configureStore( INITIAL STATE );

*******************************************************************************/

const rootNode = document.querySelector("#root");
renderDOM(<HelloWorld />, rootNode);
EOF
  git init .
  git ci -m "Initial commit" --allow-empty
  yarn add --dev budo babelify browserify babel-core babel-preset-es2017 babel-preset-react babel-preset-stage-0 \
       livereactload react-proxy babel-plugin-react-transform || return
  yarn add react react-dom
  git add .
  git ci -m "Starter code"

  # start server in a new tab
  ttab -q -t "Budo server" "cd '$PWD' && yarn start"

  #webstorm . index.js
  #e index.js &
  "$EDITOR" index.js &
}

# Git functions
gitzip() {
  if [ -z "$1" ];then
    ref=$(git rev-parse --short HEAD)
  else
    ref="$1"
  fi
  dirname=$(basename `pwd`)
  git archive --format zip "$ref" > "${dirname}-${ref}.zip"
}

gitpatch() {
  if [ -z "$1" ];then
    echo "Usage: gitpatch ref1 [ref2]"
    return
  fi
  fromref="$1"
  if [ -z "$2" ];then
    toref=$(git rev-parse --short HEAD)
  else
    toref="$2"
  fi
  dirname=$(basename `pwd`)
  git format-patch "${fromref}..${toref}" --stdout > "${dirname}-${fromref}..${toref}.patch"
  zip "${dirname}-${fromref}..${toref}.patch.zip" "${dirname}-${fromref}..${toref}.patch"
}

save_quiver() {
  quiver_to_markdown "$HOME/Dropbox (Personnelle)/Quiver.qvlibrary" "$HOME/WIP/quiver_library"
  (cd "$HOME/WIP/quiver_library"; git add --all && git commit && git push origin)
}
