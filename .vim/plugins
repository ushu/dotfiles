" Vimproc
NeoBundleLazy 'Shougo/vimproc', { 'build': {
       \ 'windows': 'make -f make_mingw32.mak',
       \ 'cygwin': 'make -f make_cygwin.mak',
       \ 'mac': 'make -f make_mac.mak',
       \ 'unix': 'make -f make_unix.mak',
       \ } }

" Unite plugins
" exported unite conf
source $HOME/.vim/unite

" better status line
NeoBundle 'bling/vim-airline'

" smart syntax checker
NeoBundleLazy 'scrooloose/syntastic', {
      \ 'autoload' : {
      \   'filetypes' : [ 'ruby', 'eruby', 'javascript', 'cucumber', 'coffee' ],
      \ }}

" connect to Gist
NeoBundle 'mattn/webapi-vim'
NeoBundleLazy 'mattn/gist-vim', {
      \   'depends': 'mattn/webapi-vim',
      \   'autoload': {'commands': 'Gist'}
      \ }

" emmet
NeoBundleLazy 'mattn/emmet-vim', {
      \ 'autoload' : {
      \   'insert' : 1,
      \   'filetypes' : [ 'html', 'css', 'sass', 'eruby'],
      \ }}

NeoBundleLazy 'arecarn/crunch', {
      \ 'autoload' : {
      \  'commands' : [ 'Crunch', 'CrunchLine' ],
      \ }}

NeoBundleLazy 'scrooloose/nerdtree', {
      \ 'autoload' : {
      \  'commands' : [ 'NERDTreeToggle' ],
      \ }}

" Git fugitive
NeoBundle 'tpope/vim-fugitive'

" Live-Reload
" commented because it is not working ...
"NeoBundle 'flomotlik/vim-livereload', { 'build': {
"      \ 'mac': 'rake',
"      \ 'unix': 'rake'
"      \ }, 'autoload' : {
"      \   'filetypes' : [ 'html', 'eruby' ],
"      \ }}
" Live-Style

" LiveStyle
NeoBundleLazy 'mattn/livestyle-vim', { 'build': {
      \ 'mac': 'go get code.google.com/p/go.net/websocket && go build -o livestyled/livestyled livestyled/livestyled.go',
      \ 'unix': 'go get code.google.com/p/go.net/websocket && go build -o livestyled/livestyled livestyled/livestyled.go',
      \ }, 'autoload' : {
      \  'commands' : [ 'LiveStyle' ],
      \ }}

"" DrawIt
"NeoBundleLazy 'DrawIt', {
"      \ 'autoload' : {
"      \   'commands' : [ 'DrawIt' ],
"      \ }}

" Neo-Complete
NeoBundle 'Shougo/neocomplete.vim'

" Copty as RTF
NeoBundle 'zerowidth/vim-copy-as-rtf'

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" KEY MAPS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" c-l to list/open Gist
nnoremap <leader>l :Gist -l<cr>

" c-SPACE => emmet
let g:user_emmet_leader_key = ','
let g:user_emmet_expandabbr_key = '<C-@>'

" fugitive
" <leader>-SPACE to enter any git command
nnoremap g<Space> :Git<Space>
" g-X for git command (X = first letter of the command)
nnoremap gs :Gstatus<CR>
nnoremap ga :Gwrite<CR>
nnoremap gc :Gcommit<CR>
nnoremap gb :Gblame<CR>
nnoremap gd :Gdiff<CR>
nnoremap gD <c-w>h<c-w>c
nnoremap gl :Glog<CR>
vnoremap <leader>p :diffput<CR>:diffupdate<CR>
vnoremap <leader>o :diffget<CR>:diffupdate<CR>

""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" OPTIONS
""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
" Syntastic
" use google's gslint
let g:syntastic_javascript_checkers = ['gjslint', 'jslint']
"let g:ctrlp_custom_ignore = {
"  \ 'dir':  '\v[\/]\.(git|hg|svn)|node_modules$|vendor',
"  \ 'file': '\v\.(exe|so|dll)$'
"  \ }

" Gist
let g:gist_get_multiplefile = 1
let g:gist_post_private = 1

" fix ugly airline in Terminal.app
let g:airline_left_sep=''
let g:airline_right_sep=''

" neocomplete
let g:acp_enableAtStartup = 0
let g:neocomplete#enable_at_startup = 1
let g:neocomplete#enable_smart_case = 1
" <TAB>: completion.
inoremap <silent> <CR> <C-r>=<SID>my_cr_function()<CR>
function! s:my_cr_function()
  return neocomplete#close_popup() . "\<CR>"
endfunction
inoremap <expr><TAB>  pumvisible() ? "\<C-n>" : "\<TAB>"

" NERD Tree
noremap <c-N> :NERDTreeToggle<cr>
let NERDTreeHijackNetrw=0

" Crunch
noremap <leader-c> :CrunchLine<CR>
